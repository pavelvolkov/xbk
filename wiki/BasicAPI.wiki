=Базовый API=

В момент обращения пользователя к сайту его запрос перехватывается и обрабатывается, а дальнейшая работа строится определённым образом. Алгоритмы первичной обработки запуска содержатся в модуле "Ядро". Сперва в глобальную область инстанцируется объект класса "xbkContext", внутри которого выполняются все дальнейшие процедуры.

Суперглобальные массивы `$_GET`, `$_POST`, `$_COOKIE`, `$_SERVER`, `$_ENV`, `$_FILES` и переменная `$HTTP_RAW_POST_DATA` заключаются внутрь контекста (объект класса "xbkContext"), образуя объект внутреннего окружения, который далее сообщается по ссылке во всех внутренних контекстных объектах. 

Инкапсуляция данных внешнего запроса в замкнутую область контекста удобна для изучения поведения системы, когда не требуется в целях тестирования модифицировать параметры внешнего запроса - достаточно инициализировать объект класса "xbkContext" и присвоить ему необходимые параметры динамически. Также можно использовать контекст внутри контекста для более специфичных нужд.

В процессе выполнения в системе формируется окружение, состоящее из трёх уровней:
 * Глобальное окружение - содержит только конфигурационный массив, объявленный в файле "config.php". 
 * Окружение контекста - содержит внешние переменные-массивы, заимствованные из глобальной области видимости, а также другие данные общего пользования. Для работы с окружением контекста предоставляется ряд вспомогательных методов. 
 * Окружение модуля - содержит языковые переменные и специальный объект текущего модуля "xbkModule". В процессе выполнения данный слой окружения индивидуален для групп контекстных объектов разных модулей. Если два объекта из разных модулей взаимодействуют друг с другом, их окружения не пересекаются. Для работы с окружением модуля предоставляется ряд методов.

Следует использовать фабричный метод сборки контекстного объекта, который инстанцирует объект заданного класса и присваивает ему по ссылке необходимое окружение динамическим образом в виде свойств объекта. Фабричный метод и методы работы внутри окружения содержатся в классе "xbkContextObject", который является базовым в иерархии рабочих классов модуля.

Правило объявления контекстного объекта в теле класса другого контекстного объекта:
{{{
class xbkMyContextObject extends xbkContextObject
{

  public function __construct2 ()
  {
    // Если класс принадлежит текущему модулю
    $this->loadClass('xbkMyOtherContextObject');
    $MyOtherContextObject = $this->factory('xbkMyOtherContextObject');

    // Если класс относится к другому модулю
    $this->loadClass('xbkMyOtherContextObject2', 'third_module', false);
    $MyOtherContextObject2 = $this->factory('xbkMyOtherContextObject2');
  }

}
}}}
Метод "loadClass()" подключает файл с классом. Первый аргумент - имя класса, второй - имя модуля, в котором находится класс, третий - указание, является ли этот модуль системным. Если подключамый класс относится к тому же модулю, в котором мы работаем, второй и третий аргумены указывать не обязательно. В системе настроен метод автозагрузки, но несмотря на это предпочтительно производить явное подключение классов - это повышает производительность. Фабричный метод "factory()" возвращает сформированный объект класса, либо false, если класс не существует. Конструктор класса `__construct2()` вызывается автоматически после выполнения обычного конструктора `__construct()` - отличается тем, что в момент его запуска уже доступно внутреннее окружение, присвоенное объекту динамическим образом.

Передача параметров объекту через конструктор класса:
{{{
class xbkMyContextObject extends xbkContextObject
{

  protected $var1;

  protected $var2;

  public function __construct2 ($param1, $param2)
  {
    $this->var1 = $param1;
    $this->var2 = $param2;
  }

  public function getVar1 ()
  {
    return $var1;
  }

  public function getVar2 ()
  {
    return $var2;
  }

}

class xbkMyOtherContextObject extends xbkContextObject
{

  public function __construct2 ()
  {
    $this->loadClass('xbkMyContextObject');
    $MyContextObject = $this->factory('xbkMyContextObject', 'test1', 'test2');

    $var1 = $MyContextObject->getVar1(); // Равно 'test1'
    $var2 = $MyContextObject->getVar2(); // Равно 'test2'

  }

}
}}}
Основная часть классов системы являются контекстными объектами - работа с ними подразумевается только в объявленном состоянии посредством фабричного метода.