=Кеш=

_Кеш — промежуточный буфер с быстрым доступом, содержащий копию той информации, которая хранится в памяти с менее быстрым доступом, но с наибольшей вероятностью может быть оттуда запрошена. Доступ к данным в кэше идёт быстрее, чем выборка исходных данных из медленной памяти или их перевычисление, за счёт чего уменьшается среднее время доступа._ (http://ru.wikipedia.org/wiki/Кеш)

Для снижения нагрузки на сервер рекомендуется кешировать промежуточные данные, если процедура их вычисления была очень ресурсоёмкой. Самый простой и эффективный способ - кешировать страницу целиком. Но если при посещении сайта нас не устраивает нежелательный эффект задержки обновления информации, можно кэшировать малозначимые фрагменты макета, либо результаты вычислительных операций, не требующих постоянного доступа к их актуальным значениям.

В системе предоставлен механизм кеширования в виде класса "xbkCache". Инстанцирование объекта данного класса осуществляется с помощью метода "cache()":
{{{
$options = Array(
'lifetime' => 3600,
'serialization' => true,
'prolongation' => true,
'tidy_probability' => 0.01,
);
$Cache = $this->cache('my_cache', $options);
}}}
Кешируемая информация хранится в базе, доступ к которой осуществляется по ключу-идентификатору в пространстве имён текущего модуля. Идентификационный ключ сообщается методу "cache()" в качестве первого аргумента. Второй аргумент - массив опций:
 * *lifetime* - время жизни кеша в секундах, по истечении которого кеш очищается (по-умолчанию - 3600 с., т. е. 1 час);
 * *serialization* - сериализация данных функцией "serialize()" при помещении в БД и "unserialize()" при получении обратно (по-умолчанию - false);
 * *prolongation* - автоматическое продление времени истечения кеша при повторном обращении к нему (по-умолчанию - false);
 * *tidy_probability* - вероятность запуска уборщика мусора для удаления старых записей кеш (по-умолчанию - 0.01);
Дальнейшая работы с объектом "xbkCache":
{{{
if ($Cache->exists()) {
    $data = $Cache->load();
} else {
    $data = $this->getMyData();
    $Cache->save($data);
}
}}}
Можно очистить кеш вручную:
{{{
if ($this->hasNewInfo()) {
    $Cache->clear();
}
}}}

==Менеджер кеша==

Менедер кеша производит операции по уборке мусора и массовому сбросу кешируемой информации.

Инстанцирование объекта "xbkCacheManager":
{{{
$this->loadClass('xbkCacheManager', 'core', true);
$CacheManager = $this->factory('xbkCacheManager');
}}}
Уборка мусора (записи кеша с истёкшим временем жизни):
{{{
CacheManager->tidy();
}}}
Удаление записей кеша текущего модуля:
{{{
$CacheManager->clear($this->_Module);
}}}
Сброс кеша целиком:
{{{
$CacheManager->clearAll();
}}}