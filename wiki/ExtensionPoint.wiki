=Расширение функциональности через точку расширения=

Цитата из википедии (http://ru.wikipedia.org/wiki/Plug-in):

  Плаги́н (от англ. plug-in) — независимо компилируемый программный модуль, динамически подключаемый к основной программе, предназначенный для расширения и/или использования её возможностей. Также может переводиться как «модуль». Плагины обычно выполняются в виде разделяемых библиотек.

  Основное приложение предоставляет сервисы, которые плагин может использовать. К ним относится предоставляемая плагину возможность зарегистрировать себя в основном приложении, а также протокол обмена данными с другими плагинами. Плагины являются зависимыми от сервисов, предоставляемых основным приложением и зачастую отдельно не используются. В противоположность им, основное приложение независимо оперирует плагинами, предоставляя конечным пользователям возможность динамически добавлять и обновлять плагины без необходимости внесения изменений в основное приложение.

  Плагином к графическому редактору может быть фильтр, который каким-либо образом изменяет изображение, палитру и прочее. Часто в виде плагина выполняется поддержка форматов файлов, например, для звуковых и видео проигрывателей, пакетов офисных приложений, программ обработки звука и графики. В программах обработки звука плагины выполняют обработку и создание звуковых эффектов, например, мастеринг, применение эквалайзера и сжатие динамического диапазона. Некоторые плагины изменяют технические характеристики звука: глубину, частоту дискретизации и прочее. Большой популярностью пользуются плагины для почтовых программ, а именно спам-фильтры, плагины для проверки писем антивирусом и пр.

  Программы, широко известные своими API для плагинов:
   * Eclipse
   * Far Manager
   * jEdit
   * Microsoft Visual Studio
   * Miranda IM
   * Mozilla Firefox
   * Photoshop
   * Total Commander
   * QIP Infium
   * Qutim

Механизм точек расширения в системе "xBk" предоставляет такой способ взаимодействия объектов, когда вызавающий объект не имеет понятия о вызываем, а само взаимодействие базируется на интерфейсе точки расширения, через которую осуществляется подключение. К одной точке расширения может подключиться несколько объектов-расширений.

Прицип работы точки расширения аналогичен работе электрической розетки, к которой может подключиться несколько устройств с интерфейсом 220 В и определённой формой штепселя. По-сути, подключаемое расширение - это набор функций (методов класса) обратного вызова.

Точка расширения объявляется в декларационном файле "module.xml" в группе тегов "`<extensionPoints />`":
{{{
<extensionPoints>
    <extensionPoint name="my_extension_point" class="MyModule_MyEP" />
</extensionPoints>
}}}
Атрибут "name" - идентификационное имя точки расширения, "class" - класс точки расширения, в котором объявляется интерфейс подключения.

Пример класса точки расширения:
{{{
class MyModule_MyEP extends xbkContextObject
{

    /**
     * Конструктор класса
     *
     * @access      public
     */
    public function __construct2 (xbkUri $Uri)
    {

    }

    /**
     * Получение содержимого
     *
     * @access     public
     * @return     string
     */
    public function getTitle ()
    {
    	return 'Unnamed';
    }

    /**
     * Получение содержимого
     *
     * @access     public
     * @return     string
     */
    public function getContent ()
    {
    	return '';
    }

}
}}}
Пустые методы точки расширения определяют её интерфейс, а возвращаемые значения - значения по-умолчанию.

Чтобы подключиться к точке расширения, необходимо создать класс с таким же интерфейсом, а в декларационном файле "module.xml" объявить подключение следующим образом:
{{{
<extensions>
    <extension name="my_extension" class="MyOtherModule_MyExtension" weight="10" extensionPoint="my_extension_point" extensionPointModule="my_module" />
</extensions>
}}}