=Введение=

*xBk* - объектно-ориентированная модульная система web-проектирования с гибкой настройкой работы и возможностью произвольного расширения до любого уровня сложности за счёт интеграции дополнительных пользовательских модулей. 

==Системные требования==
 * PHP версии >= 5.2. 
 * расширения "PDO", "mb_string"
 * модуль web-сервера Apache "mod_rewrite". 

==Сторонние библиотеки в составе xBk==
 * ORM "Doctrine"
 * шаблонизатор "patTemplate"
 * библиотека Zend Framework

==Минимальный навык разработчика модулей==
 * Знание объектной модели PHP5
 * Знание основных принципов проектирования MVC и шаблоны проектирования
 * Знание общепринятных стандартов кодирования
 * Знание вышеуказанных библиотек

==Минимальный навык администратора проектов==
 * Общее представление о конфигурации на сервере систем типа CMS
 * Умение работать с шаблонами - в частности с шаблонизатором "patTemplate" или phptmplate
 * Чёткое следование инструкциям

==Важные определения==
 * Модуль
 * Окружение
 * Контекст

 
*Модуль* - набор программных компонент, которые объединены для выполнения схожих задач, имеющие общие конфигурационные, языковые настройки, общий набор скинов и общую структуру данных. Понятие "модуль" здесь можно понимать как "подсистема" или "стереотип" (UML).
 * Модуль поставляется единым комплектом. 
 * Модули системы условно разделены на две группы - системные и пользовательские - соглашения работы полностью идентичны у тех и других, но хранятся в разных папках.
 Разделение модулей на две группы удобно с точки зрения централизованного обновления
 системы до новых версий. Особую координационную роль играет модуль "Ядро" (core), являясь
 первичным в последовательности запуска. 
 * Модуль может содержать модели данных во внутренней папке "models/" и историю миграций в "migrations/", если предполагается хранилище данных. Работа с моделями и миграциями производится по правилам библиотеки "ORM Doctrine". 
 * Основными программными компонентами модуля являются классы "php", _имена которых должны быть уникальными_. 
 * Ключевую роль в работе модуля играет особая группа класcов - контекстные объекты.
 * Параметры интеграции модуля в системе устанавливаются в декларационном файле "module.xml", который находится в папке модуля.
 * Существует несколько уровней взаимодействия модулей друг с другом. Тесное взаимодействие - когда один модуль непосредственно обращается к хранимым данным другого модуля. Нормальное - обращение к классам другого модуля. Обратное (ожидающее) взаимодействие - объявление точек расширения и подключение к ним (отличается от системы хуков тем, что здесь взаимодйствуют два объекта - вызыващий и вызываемый - посредством установленного API-интерфейса точки расширения).

*Окружение* - набор переменных в определённой области видимости. Различаются три уровня окружения:
 * Глобальное окружение - содержит только конфигурационный массив.
 * Окружение контекста - содержит внешние переменные-массивы, заимствованные из глобального окружения, а также ряд других данных общего пользования. Для работы с окружением контекста предоставляется ряд вспомогательных методов.
 * Окружение модуля - содержит языковые переменные и специальный объект текущего модуля. В процессе выполнения данный слой окружения индивидуален для групп контекстных объектов разных модулей. Для работы с окружением модуля предоставляется ряд вспомогательных методов.

*Контекст* - первичный класс "xbkContext" модуля "Core", внутри которого выполняются все дальнейшие процедуры.
 * Суперглобальные массивы `_GET`, `_POST`, `_COOKIE`, `_SERVER`, `_ENV`, `_FILES` и переменная `$HTTP_RAW_POST_DATA` заключаются в контекст, образуя объект внутреннего окружения, который далее передаётся по ссылке во всех внутренних контекстных объектах. 
 * Инкапсуляция данных внешнего запроса в замкнутую область контекста удобна для изучения поведения системы, когда не требуется в целях тестирования модифицировать параметры внешнего запроса - достаточно инициализировать объект класса "xbkContext" и присвоить ему необходимые параметры динамически. Также можно использовать контекст внутри контекста для более специфичных нужд.

`Правило объявления контестного объекта в теле класса другого контекстного объекта:`
{{{
class xbkMyContextObject extends xbkContextObject
{

  public function __construct2 ()
  {
    // Если класс принадлежит текущему модулю
    $this->loadClass('xbkMyOtherContextObject');
    $MyOtherContextObject = $this->factory('xbkMyOtherContextObject');

    // Если класс относится к другому модулю
    $this->loadClass('xbkMyOtherContextObject2', 'third_module', false);
    $MyOtherContextObject2 = $this->factory('xbkMyOtherContextObject2');
  }

}
}}}

`Пояснение:`
Метод "loadClass" подключает файл с классом. Первый аргумент - имя класса, второй - имя модуля, в котором находится класс, третий - указание, является ли этот модуль системным. Если подключамый класс относится к тому же модулю, в котором мы работаем, второй и третий аргумены указывать не обязательно. В системе настроен метод автозагрузки, но несмотря на это предпочтительно производить явное подключение классов - это повышает производительность. Фабричный метод "factory", помимо создания экземпляра класса, сообщает ему в виде свойств всё необходимое окружение, характерное для данного контекста и для модуля данного класса. Базовый класс xbkContextObject предоставляет все необходимые методы для работы внутри окружения в данном контекте, включая метод "loadClass" и "factory". Конструктор класса `__construct2()` вызывается автоматически после выполнения обычного конструктора `__construct()` - отличается тем, что в момент его запуска уже доступно внутреннее окружение, присвоенное объекту динамическим образом.

`Передача параметров объекту через конструктор посредством фабричного метода производится следующим образом:`
{{{
class xbkMyContextObject extends xbkContextObject
{

  protected $var1;

  protected $var2;

  public function __construct2 ($param1, $param2)
  {
    $this->var1 = $param1;
    $this->var2 = $param2;
  }

  public function getVar1 ()
  {
    return $var1;
  }

  public function getVar2 ()
  {
    return $var2;
  }

}

class xbkMyOtherContextObject extends xbkContextObject
{

  public function __construct2 ()
  {
    $this->loadClass('xbkMyContextObject');
    $MyContextObject = $this->factory('xbkMyContextObject', 'test1', 'test2');

    $var1 = $MyContextObject->getVar1(); // Равно 'test1'
    $var2 = $MyContextObject->getVar2(); // Равно 'test2'

  }

}
}}}
`Пояснение:`
Основная часть классов системы являются контекстными объектами и их производными - работа с ними подразумевается только в объявленном состоянии посредством фабричного метода.

==Правило задания имён классов и файлов==
Автозагрузка классов производится, если содержащий файл с расширением "php" совпадает по имени с классом внутри файла. К примеру, для класса "xbkContextObject" файл должен именоваться "xbkContextObject.php" и находиться в папке модуля - это основное правило автоматической загрузки. Префикс "xbk" характерен для классов системных модулей. В процессе проектирования пользовательских модулей можно обходиться без этого префикса.