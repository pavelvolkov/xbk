=Введение=

*xBk* - объектно-ориентированная модульная система web-проектирования с гибкой настройкой работы и возможностью произвольного расширения до любого уровня сложности путём интеграции дополнительных пользовательских модулей. 

==Системные требования==
 * PHP версии >= 5.2. 
 * расширения "PDO", "mb_string"
 * модуль web-сервера Apache "mod_rewrite". 

==Сторонние библиотеки в составе xBk CMF==
 * ORM "Doctrine"
 * шаблонизатор "patTemplate"

==Минимальный навык разработчика модулей==
 * Знание объектной модели PHP5
 * Знание основных принципов проектирования MVC и шаблоны проектирования
 * Знание вышеуказанных библиотек

==Минимальный навык администратора проектов==
 * Общее представление о конфигурации на сервере систем типа CMS
 * Умение работать с шаблонами - в частности с шаблонизатором "patTemplate"
 * Чёткое следование инструкциям

==Важные определения==
 * Модуль
 * Окружение
 * Контекст

 
*Модуль* - набор программных компонентов, объединённых для выполнения схожих задач, имеющих общие конфигурационные, языковые настройки, общий набор скинов и общую структуру данных. 
 * Модуль поставляется единым комплектом. 
 * Модули системы условно разделены на две группы - базовые и пользовательские - соглашения работы полностью идентичны у тех и других, но хранятся в разных папках.
 Разделение модулей на две группы удобно с точки зрения централизованного обновления
 системы до новых версий. Особую координационную роль играет модуль "Core", являясь
 первичным в последовательности запуска. 
 * Модуль содержит модели данных во внутренней папке "models/" и историю миграций в "migrations/", если хранилище данных предполагается. Работа с моделями и миграциями производится по правилам библиотеки "Doctrine". 
 * Модуль также может содержать сторонние библиотеки классов PHP, для интеграции которых предоставлена возможность настройки дополнительных процедур автозагрузки. 
 * Основными программными компонентами модуля являются классы "php", _имена которых должны быть уникальными_. 
 * Ключевую роль в работе модуля играет особая группа класcов - контекстных объектов.

*Окружение* - набор переменных в определённой области видимости. Разлючаются глобальное окружение, содеражащее только главный конфигурационный массив, и внутреннее - индивидуальное для каждого модуля.

*Контекст* - первичный класс "xbkContext" модуля "Core", внутри которого выполняются все дальнейшие процессы.
 * Суперглобальные массивы GET, POST, COOKIE, SERVER, FILES и переменная $HTTP RAW POST DATA заключаются в контекст, образуя объект внутреннего окружения, который далее передаётся по ссылке во всех внутренних контекстных объектах. 
 * Заключение данных внешнего запроса в замкнутую область контекста удобно для изучения поведения системы, когда не требуется в целях тестирования модифицировать параметры внешнего запроса - достаточно инициализировать объект класса "xbkContext" и присвоить ему необходимые параметры динамически. Также можно использовать контекст внутри контекста для более специфичных нужд.

`Правило объявления контестного объекта в теле класса другого контекстного объекта:`
{{{
class xbkMyContextObject extends xbkContextObject
{

  public function __construct2 ()
  {
    $MyOtherContextObject =& $this->factory('xbkMyOtherContextObject');
  }

}
}}}

`Пояснение:`
Фабричный метод "factory" помимо создания экземпляра объекта сообщает ему ряд динамических свойств, характерных для данного контекста и необходимых для самой контекстной работы. Базовый класс xbkContextObject предоставляет фабричный метод "factory" и метод вызова шаблона "template". Конструктор класса construct2 () вызывается автоматически после обычного конструктора construct() - отличается тем, что в момент его запуска уже доступно внутреннее окружение, присвоенное объекту динамическим образом.

`Передача параметров объекту через конструктор посредством фабричного метода производится следующим образом:`
{{{
class xbkMyContextObject extends xbkContextObject
{

  protected $var1;

  protected $var2;

  public function __construct2 ($param1, $param2)
  {
    $this->var1 = $param1;
    $this->var2 = $param2;
  }

  public function getVar1 ()
  {
    return $var1;
  }

  public function getVar2 ()
  {
    return $var2;
  }

}

class xbkMyOtherContextObject extends xbkContextObject
{

  public function __construct2 ()
  {
    $MyContextObject =& $this->factory('xbkMyContextObject', 'test1', 'test2');

    $var1 = $MyContextObject->getVar1(); // Равно 'test1'
    $var2 = $MyContextObject->getVar2(); // Равно 'test2'

  }

}
}}}
`Пояснение:`
Основная часть классов системы являются контекстными объектами и их производными - работа с ними подразумевается только в объявленном состоянии посредством фабричного метода.

==Правило задания имён классов и файлов==
Автозагрузка классов производится, если содержащий файл с расширением "php" совпадает по имени с классом внутри файла. К примеру для класса "xbkContextObject" файл должен именоваться "xbkContextObject.php" и находиться в папке модуля - это основное правило автоматической загрузки, но если в дальнейшем возникнет необходимость давать имена файлам по какому-то другому принципу (создавать подпапки внутри одного модуля, к примеру, или давать более короткие имена), то можно добавлять дополнительные методы автозагрузки к существующему, указывая их в декларационном файле модуля.