xBk - объектно-ориентированная модульная система web-проектирования с гибкой настройкой работы и возможностью произвольного расширения до любого уровня сложности путём интеграции дополнительных пользовательских модулей. Система написана на PHP версии >= 5.2. с использованием дополнительных расширений "PDO", "mb_string" и модуля web-сервера Apache "mod_rewrite". Базовый пакет также включает в себя ряд сторонних библиотек: ORM "Doctrine" и шаблонизатор "patTemplate". Система использует СУБД - на текущий момент поддерживает "fbsql", "ibase", "mssql", "mysql", "mysqli", "oci8", "pgsql", "querysim", "sqlite".

В описании работы системы используется следующий ряд определений:

Модуль - набор программных компонентов, объединённых для выполнения схожих задач, имеющих общие конфигурационные, языковые настройки, общий набор скинов и общую структуру данных. Модуль поставляется единым комплектом. Модули системы условно разделены на две группы - базовые и пользовательские - соглашения работы полностью идентичны у тех и других, но хранятся в разных папках. Разделение модулей на две группы удобно с точки зрения централизованного обновления системы до новых версий. Особую координационную роль играет модуль "Core", являясь первичным в последовательности запуска.
Модуль содержит модели данных во внутренней папке "models/" и историю миграций в "migrations/", если хранилище данных предполагается. Работа с моделями и миграциями производится по правилам библиотеки "Doctrine".
Модуль также может содержать сторонние библиотеки классов PHP, для интеграции которых предоставлена возможность настройки дополнительных процедур автозагрузки.

Окружение - набор алгоритмов для запуска главного модуля "Core", а также переменные в глобальной области видимости. В глобальной области находится только конфигурационный массив, настройка которого осуществляется в файле "config.php".

Контекст - первичный класс "xbkContext" модуля "Core", внутри которого выполняются все дальнейшие процессы. Суперглобальные массивы GET, POST, COOKIE, SERVER, FILES и переменная $HTTP RAW POST DATA заключаются в контекст, образуя объект внутреннего окружения, который далее передаётся по ссылке во всех внутренних контекстных объектах. Заключение данных внешнего запроса в замкнутую область контекста удобно для изучения поведения системы, когда не требуется в целях тестирования модифицировать параметры внешнего запроса - достаточно инициализировать объект класса "xbkContext" и присвоить ему необходимые параметры пользовательским образом. А также можно использовать контекст внутри контекста для более специфичных нужд.

Правило объявления контестного объекта в теле класса другого контекстного объекта:

{{{
class xbkMyContextObject extends xbkContextObject
{

  function __construct2 ()
  {
    $MyOtherContextObject = $this->factory('xbkMyOtherContextObject');
  }

}
}}}

Фабричный метод "factory" помимо создания экземпляра объекта присваивает ему ряд динамических свойств, характерных для данного контекста и необходимых для самой работы в контексте. Базовый класс xbkContextObject предоставляет фабричный метод "factory" и метод вызова шаблона "template".
Конструктор класса __construct2 () вызывается автоматически после обычного конструктора __construct() - отличается тем, что в момент его запуска уже доступно внутреннее окружение, присвоенное объекту динамическим образом.