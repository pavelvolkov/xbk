В процессе проектирования web-приложения периодически приходится сталкиваться с необходимостью менять структуру данных - добавлять, удалять столбцы, создавать новые таблицы, ключи и т. д. Принимая во внимание, что в системе xBk доступ к базе данных осуществляется через абстрагирующий слой, недопустимо вносить изменения в структуру БД непосредственно - это всегда нужно согласовывать с нашими моделями данных. Кроме того, если мы пишем модуль, который планируется использовать в последующих проектах, нужно всегда вести некий алгоритм обновления структуры - историю изменений структуры данных конкретного модуля.

Миграция - это специальный класс php, описывающий изменение структуры данных, который используется в процессе обновления модуля со старой версии на новую. Каждый модуль ведёт свою историю миграций. Миграционные классы располагаются в папке "migrations" модуля, базовым классом каждого из которых является "xbkMigration" класс. Каждая миграция имеет свой номер, отражённый в имени файла класса, а также подразумевает процедуру изменения структуры в обоих направлениях - как вверх, так и вниз - возврат к старой версии.
Описание механизма изменения структуры производится внутри методов "up()" и "down()", которые, соответственно, определяют направление внесения изменений. Имя класса может быть произвольным (но желательно использовать суффикс "Migration"), а имя файла класса должно начинаться с префикса, который указывает на порядковый номер текущей миграции. Пример: "XXX_representative_name.class.php".

{{{
<?php

// 001_add_table.class.php
class AddTable_Migration extends xbkMigration
{
    public function up()
    {
        global $CONFIG;
        $this->createTable($CONFIG['db']['table_prefix'].'migration_test', array('field1' => array('type' => 'string')));
    }

    public function down()
    {
        global $CONFIG;
        $this->dropTable($CONFIG['db']['table_prefix'].'migration_test');
    }
}

// 002_add_column.class.php
class AddColumn_Migration extends xbkMigration
{
    public function up()
    {
        global $CONFIG;
        $this->addColumn($CONFIG['db']['table_prefix'].'migration_test', 'field1', 'string');
    }

    public function down()
    {
        global $CONFIG;
        $this->renameColumn($CONFIG['db']['table_prefix'].'migration_test', 'field1', 'field2');
    }
}

// 003_change_column.class.php
class ChangeColumn_Migration extends xbkMigration
{
    public function up()
    {
        global $CONFIG;
        $this->changeColumn($CONFIG['db']['table_prefix'].'migration_test', 'field1', 'integer');
    }

    public function down()
    {
        global $CONFIG;
        $this->changeColumn($CONFIG['db']['table_prefix'].'migration_test', 'field1', 'string');
    }
}

?>
}}}

Дополнительно можно объявлять методы "preUp()", "postUp()", "preDown()", "postDown()", чтобы производить в них дополнительные действия, не относящиеся к структуре - например, делать перенос информации из одной таблицы в другую перед удалением исходной, выполнять работу с файлами, точками расширения и т. д. Также доступен метод "updateRegister()", который перерегистрирует данный модуль.

Управление миграциями осуществляется в панели суперадмина индивидуально для каждого модуля. При разработке нового модуля писать миграционный класс не нужно - первичная установка выполняется по ссылке "Установить" в списке действий, после чего необходимые таблицы БД создаются на основе моделей данных. В дальнейшем, если мы собираемся изменить структуру данных, нужно обновить наши модели данных и написать миграционный класс. Если не было ранее произведено изменения структуры посредством механизма миграций, текущая миграция будет обозначаться как "не определена / не задана". Такая же надпись появится, если переустановить ядро системы или случайно удалить регистрацию модуля - в этом случае будет предложено указать номер текущей миграции явным образом. Номер требуемой миграции для модуля прописывается в файле "module.xml" в группе тегов "meta":
{{{
    <meta>
        <project>core</project>
        <version>1.10</version>
        <xbkVersion>0.11</xbkVersion>
        <migration>10</migration>
        <class>xbkCoreMeta</class>
        <weight>1</weight>
    </meta>
}}}

Дополнительная информация по правилам написания миграционных классов и обзор доступных методов изменения структуры преставлены в документации "ORM Doctrine":
http://www.doctrine-project.org/documentation/manual/1_1/en/migrations