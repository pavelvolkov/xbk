Механизм шаблонизации в системе "xBk" является производным от популярного шаблонизатора "patTemplate", широко используемого в CMS "Joomla!", "Mambo", других системах и проектах. Шаблонизатор "patTemplate" интегрирован в систему через адаптационную оболочку, позволяющую также расширять функциональность шаблонизатора по общим правилам системы "xBk", используя декларационный файл модуля.
Нижеследующее руководство по правилам шаблонизации является вольным изложением оригинала с дополнениями: http://trac.php-tools.net/patTemplate/wiki/Docs

Главное назначение шаблонизатора: отделение бизнес-логики приложения от представления. Иначе говоря - разделение PHP и HTML. Такой подход позволяет дизайнеру, владеющему HTML-вёрсткой, и программисту работать параллельно и независимо друг от друга.
Шаблонизатор предоставляет язык разметки на базе тегов XML для управления отображением информации - по сути, язык шаблона ничем не отличается от HTML, кроме введения нескольких дополнительных управляющих тегов, выделенных в отдельное пространство имён "xbk". Шаблону только сообщаются данные в виде переменных, массивов, объектов, формат представления которых для конечного пользователя определяется в теле шаблона. Шаблон поддерживает простые логические операции, операции с циклами, специфические функции и модификаторы переменных. Более сложные действия в слое шаблона не предполагаются - объёмные процедуры желательно смещать в слой бизнес-логики, так как перегрузка шаблона управляющими тегами сильно снижает общую производительность.
В отличие от других языков шаблонизации, язык "patTemplate" имеет повествовательно-декларационный характер - вы не найдёте в шаблоне никаких конструкций "if/else" или "for-loops", всё очень упрощено и максимально наглядно представлено.
Для задачи присвоения необходимых значений переменным шаблона используется класс PHP "xbkTemplate", а также наследуемый контекстный метод "template()", являющийся своего рода фабричным для правильной сборки объекта данного класса. Рабочий API-интерфейс класса "xbkTemplate" использует всего несколько методов.


=Создание шаблонов=

Шаблонизатор позволяет разделять вывод на несколько фрагментов, именуемых шаблонами. Соответственно, один файл представления может содержать сразу несколько шаблонов. Файл с шаблонами имеет расширение ".tpl" и в дальнейшем будет называться шаблонный набор. Наборы шаблонов для заданного модуля вместе с графикой, стилями и скриптами образуют скин и представлены следующей структурой папок внутри папки заданного модуля следующим образом:
{{{
skin/
  tpl/
  img/
  css/
  js/
}}}
Соответственно, в папке "tpl" хранятся наборы шаблонов - файлы с расширениями ".tpl".
Шаблоны в наборе могут пересекаться, или находиться отдельно друг от друга. Удобство такого подхода можно увидеть на следующем примере:
{{{
<xbk:tmpl name="page">
  Это основная страница.
  <xbk:tmpl name="foo">
    Это дополнительный шаблон.
  </xbk:tmpl>
  <xbk:tmpl name="bar">
    Это ещё один шаблон.
  </xbk:tmpl>
</xbk:tmpl>
}}}
Внутри любого шаблона можно помещать сколько угодно шаблонов, каждый из которых должен иметь уникальное имя. По уникальному имени можно ссылаться на данный шаблон из PHP, когда мы сообщаем ему переменные.
Загрузка шаблонного набора выполняется очень просто:
{{{
$tmpl = $this->template("my-templates");
}}}
Метод "template()" унаследован от базового класса "xbkContextObject" (работа с шаблонами предполагается только в контексте), возвращает объект класса "xbkTemplate", сформированный нужным образом. Единственный параметр метода указывает на имя файла набора шаблонов без расширения - то есть в нашем случае будет загружен файл "my-templates.tpl" из папки "skin/tpl/".
Во время загрузки файла сканируются все <xbk:tmpl/> теги. Структура шаблонов в нашем примере будет следующая:
{{{
+ page
  + foo
  + bar 
}}}
Чтобы получить обработанный результат, нужно вызвать метод "getParsedTemplate()", сообщив ему имя шаблона:
{{{
$page = $tmpl->getParsedTemplate('page');
}}}
Результат обработки будет следующим:
{{{
  Это основная страница.
    Это дополнительный шаблон.
    Это ещё один шаблон.
}}}
Если не указать имя шаблона в качестве параметра, метод вернёт корневой шаблон, который был обнаружен первым во время разбора файла. В данном случае - шаблон "page".


=Добавление переменных в шаблон=

Переменная - указанное место в шаблоне, которому может быть назначено любое значение из PHP. Переменные шаблона могут быть двух типов:
# Локальные переменные, для которых областью видимости является только тот шаблон, в котором они находятся;
# Глобальные переменные, которые доступны из любого шаблона в шаблонном наборе.
Переменная шаблона помещается в фигурные кавычки и может содержать латинские буквы в верхнем регистре, цифры, дефис и нижнее подчёркивание.
{{{
<xbk:tmpl name="page">
  Привет, {NAME}.<br/>
</xbk:tmpl>
}}}
Данный шаблон содержит переменную "{NAME}", которому можно сообщить значение из PHP-приложения.


==Добавление локальной переменной методом "addVar()"==

Чтобы добавить локальную переменную, нужно воспользоваться методом "addVar()", сообщить ему в качестве параметров имя шаблона, в который добавляем, имя переменной и её значение:
{{{
$tmpl = $this->template("my-templates");
$tmpl->addVar('page', 'NAME', 'Владимир');
$page = $tmpl->getParsedTemplate();
$this->setContent($page);
}}}
Данная запись отобразит следующее:
{{{
Привет, Владимир.
}}}