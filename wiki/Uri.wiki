Класс xbkUri предоставляет ряд методов для упрощения стандартных операций модификации ссылок. Ссылка (url) или uri в широком понимании здесь отображает иерархический путь к искомой секции, перечень дополнительных параметров в виде строки запроса, протокол соединения и поддомены от основного домена. В основу генерации ссылки от текущей или любой другой заложены принципы дополнения, наследования, исключения, переключения её компонентов. В качестве составляющих компонентов uri здесь рассматриваются протокол соединения (или схема - "http", "https"), внутренний путь, по форме напоминающий структуру каталогов и классический запрос после вопросительного знака.

Работа с uri подобного вида является главным назначением данного класса:
{{{
http://my.domain.com/path/to/section/?param1=value1&param2=value2
}}}

Рассмотрим несколько примеров работы с вышеуказанной ссылкой, принимая во внимание, что она является текущим внешним запросом.

{{{
$uri =& $this->factory('xbkUri');
// Вывод текущей ссылки, исключая строку параметров, так как наследование ещё не было задано
$uri1 = $uri->build(); // Возвращает '/path/to/section/'
// Сообщает дополнительные параметры
$uri2 = $uri->build('param3=value3&param4=value4'); // Возвращает '/path/to/section/?param3=value3&param4=value4'
// Сообщает дополнительные параметры в виде массива
$uri3 = $uri->build(Array('param3' => 'value3', 'param4' => 'value4')); // Возвращает '/path/to/section/?param3=value3&param4=value4'
// Установка списка наследуемых параметров
$uri->addInheritedParameters('param1&param2');
$uri4 = $uri->build(); // Возвращает '/path/to/section/?param1=value1&param2=value2'
$uri5 = $uri->build('param3=value3&param4=value4'); // Возвращает '/path/to/section/?param1=value1&param2=value2&param3=value3&param4=value4''
// Исключение наследуемых параметров
$uri->removeInheritedParameters('param1&param2');
$uri5 = $uri->build(); // Возвращает '/path/to/section/
// Установка списка наследуемых параметров в виде массива
$uri->addInheritedParameters(Array('param1', 'param2'));
$uri6 = $uri->build(); // Возвращает '/path/to/section/?param1=value1&param2=value2'
// Исключение наследуемых параметров в виде массива
$uri->removeInheritedParameters(Array('param1', 'param2'));
// Исключение всех наследуемых параметров
$uri->removeAllInheritedParameters();
$uri7 = $uri->build(); // Возвращает '/path/to/section/'
// Переход на секцию вверх
$uri->gotoParentSection();
$uri8 = $uri->build(); // Возвращает '/path/to/'
// Переход на секцию вниз
$uri->gotoChildSection('section2');
$uri9 = $uri->build(); // Возвращает '/path/to/section2/'
// Переход на смежную секцию
$uri->gotoSideSection('section3');
$uri9 = $uri->build(); // Возвращает '/path/to/section3/'
// Переход на секцию
$uri->gotoSection('/another/path/to/another/section/');
$uri10 = $uri->build(); // Возвращает '/another/path/to/another/section/'
// Установка другого протокола соединения (Псевдоним - "setScheme()")
$uri->setProtocol('https');
$uri11 = $uri->build(); // Возвращает 'https://my.domain.com/another/path/to/another/section/'
// Переключение протокола соединения на противоположный
$uri->swapProtocol();
$uri12 = $uri->build(); // Возвращает '/another/path/to/another/section/'
// Получить текущий протокол соединения
$currentProtocol = $uri->getProtocol(); // Возвращает 'http'
// Получить текущий путь в виде перечня секций в порядке убывания
$currentSection = $uri->getCurrentSection(); // Возвращает Array('another', 'path', 'to', 'another', 'section')
// Устанавливает текущую ссылку
$uri->setThisUri();
$uri13 = $uri->build(); // Возвращает /path/to/section/?param1=value1&param2=value2
}}}